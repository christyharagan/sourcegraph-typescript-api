/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type ExcludedGitHubRepo = {
    [k: string]: unknown;
} | {
    [k: string]: unknown;
} | {
    [k: string]: unknown;
} | {
    [k: string]: unknown;
} | {
    [k: string]: unknown;
};
/**
* When set to true, this external service will be chosen as our 'Global' GitHub service. Only valid on Sourcegraph.com. Only one service can have this flag set.
*/
export declare type CloudGlobal = boolean;
/**
* Only used to override the cloud_default column from a config file specified by EXTSVC_CONFIG_FILE
*/
export declare type CloudDefault = boolean;
/**
* Configuration for a connection to GitHub or GitHub Enterprise.
*/
export interface GitHubConnection {
    /**
     * URL of a GitHub instance, such as https://github.com or https://github-enterprise.example.com.
     */
    url: string;
    /**
     * The type of Git URLs to use for cloning and fetching Git repositories on this GitHub instance.
     *
     * If "http", Sourcegraph will access GitHub repositories using Git URLs of the form http(s)://github.com/myteam/myproject.git (using https: if the GitHub instance uses HTTPS).
     *
     * If "ssh", Sourcegraph will access GitHub repositories using Git URLs of the form git@github.com:myteam/myproject.git. See the documentation for how to provide SSH private keys and known_hosts: https://docs.sourcegraph.com/admin/repo/auth#repositories-that-need-http-s-or-ssh-authentication.
     */
    gitURLType?: "http" | "ssh";
    /**
     * A GitHub personal access token. Create one for GitHub.com at https://github.com/settings/tokens/new?description=Sourcegraph (for GitHub Enterprise, replace github.com with your instance's hostname). See https://docs.sourcegraph.com/admin/external_service/github#github-api-token-and-access for which scopes are required for which use cases.
     */
    token: string;
    rateLimit?: GitHubRateLimit;
    /**
     * TLS certificate of the GitHub Enterprise instance. This is only necessary if the certificate is self-signed or signed by an internal CA. To get the certificate run `openssl s_client -connect HOST:443 -showcerts < /dev/null 2> /dev/null | openssl x509 -outform PEM`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
     */
    certificate?: string;
    /**
     * An array of repository "owner/name" strings specifying which GitHub or GitHub Enterprise repositories to mirror on Sourcegraph.
     */
    repos?: string[];
    /**
     * An array of organization names identifying GitHub organizations whose repositories should be mirrored on Sourcegraph.
     */
    orgs?: string[];
    /**
     * An array of configurations defining existing GitHub webhooks that send updates back to Sourcegraph.
     */
    webhooks?: GitHubWebhook[];
    /**
     * A list of repositories to never mirror from this GitHub instance. Takes precedence over "orgs", "repos", and "repositoryQuery" configuration.
     *
     * Supports excluding by name ({"name": "owner/name"}) or by ID ({"id": "MDEwOlJlcG9zaXRvcnkxMTczMDM0Mg=="}).
     *
     * Note: ID is the GitHub GraphQL ID, not the GitHub database ID. eg: "curl https://api.github.com/repos/vuejs/vue | jq .node_id"
     */
    exclude?: [ExcludedGitHubRepo, ...ExcludedGitHubRepo[]];
    /**
     * An array of strings specifying which GitHub or GitHub Enterprise repositories to mirror on Sourcegraph. The valid values are:
     *
     * - `public` mirrors all public repositories for GitHub Enterprise and is the equivalent of `none` for GitHub
     *
     * - `affiliated` mirrors all repositories affiliated with the configured token's user:
     * 	- Private repositories with read access
     * 	- Public repositories owned by the user or their orgs
     * 	- Public repositories with write access
     *
     * - `none` mirrors no repositories (except those specified in the `repos` configuration property or added manually)
     *
     * - All other values are executed as a GitHub advanced repository search as described at https://github.com/search/advanced. Example: to sync all repositories from the "sourcegraph" organization including forks the query would be "org:sourcegraph fork:true".
     *
     * If multiple values are provided, their results are unioned.
     *
     * If you need to narrow the set of mirrored repositories further (and don't want to enumerate it with a list or query set as above), create a new bot/machine user on GitHub or GitHub Enterprise that is only affiliated with the desired repositories.
     */
    repositoryQuery?: [string, ...string[]];
    /**
     * The pattern used to generate the corresponding Sourcegraph repository name for a GitHub or GitHub Enterprise repository. In the pattern, the variable "{host}" is replaced with the GitHub host (such as github.example.com), and "{nameWithOwner}" is replaced with the GitHub repository's "owner/path" (such as "myorg/myrepo").
     *
     * For example, if your GitHub Enterprise URL is https://github.example.com and your Sourcegraph URL is https://src.example.com, then a repositoryPathPattern of "{host}/{nameWithOwner}" would mean that a GitHub repository at https://github.example.com/myorg/myrepo is available on Sourcegraph at https://src.example.com/github.example.com/myorg/myrepo.
     *
     * It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.
     */
    repositoryPathPattern?: string;
    /**
     * Deprecated and ignored field which will be removed entirely in the next release. GitHub repositories can no longer be enabled or disabled explicitly. Configure repositories to be mirrored via "repos", "exclude" and "repositoryQuery" instead.
     */
    initialRepositoryEnablement?: boolean;
    authorization?: GitHubAuthorization;
    cloudGlobal?: CloudGlobal;
    cloudDefault?: CloudDefault;
}
/**
* Rate limit applied when making background API requests to GitHub.
*/
export interface GitHubRateLimit {
    /**
     * true if rate limiting is enabled.
     */
    enabled: boolean;
    /**
     * Requests per hour permitted. This is an average, calculated per second. Internally, the burst limit is set to 100, which implies that for a requests per hour limit as low as 1, users will continue to be able to send a maximum of 100 requests immediately, provided that the complexity cost of each request is 1.
     */
    requestsPerHour: number;
    [k: string]: unknown;
}
export interface GitHubWebhook {
    /**
     * The name of the GitHub organization to which the webhook belongs
     */
    org: string;
    /**
     * The secret used when creating the webhook
     */
    secret: string;
    [k: string]: unknown;
}
/**
* If non-null, enforces GitHub repository permissions. This requires that there is an item in the `auth.providers` field of type "github" with the same `url` field as specified in this `GitHubConnection`.
*/
export interface GitHubAuthorization {
    [k: string]: unknown;
}
